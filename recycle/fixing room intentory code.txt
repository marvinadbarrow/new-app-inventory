Steps needed. 
create a temporary box with a temporary id
Maybe set state with the details of the transfer ojbect
run delete on item, which will remove it from both container and all items array (hopefully)
run add item using saved state item data. 


what to check: 
delete to see what is altered: 

a parameter named BOXOBJECT is sent to the function  -
it contains box, section and location indexes (this was created in boxViewer) and box_contents
the item ID is also sent as a parameter to the delete function (which is used to filter its object out of all items array)

REMOVE FROM ALL ITEMS ARRAY
yes, at teh very top of the delete box item function a new all items array is created with the item to delete filtered out, and then at the end of the function setAllItemsArray() is executed with the new array, so that the object is removed from the all items array

REMOVE FROM CONTAINER ARRAY

re-check add


OBJECTS TO GET RID OF FROM ALL ITEMS ARRAY - 
Brown chest - bottom drawer:
HDD enclosure and unboxed (containing laptop and rk61)


















DONE ------------------------------------------------------------------------

NOTE: check how clicking on the box causes the box to open to the page displaying all box items. 
DONE! it just uses general, specific and boxId. sent from allviewobject.jsx



upload to current progress to GITHUB. 






refactor display all section items using containers array rather than all items array. 
Method: 
get parent id and section id. 
create a variable for the section using id's to find those locations.  
map through the array's section contents and for each object, name, create an element to hold all of its items, using the box id as id for the element
then loop through the box contents and create a list item for each item in the box using the item id as the id for the list item

the function which opens the box is in the 'AllItemsObject' component and only needs to send, general, id and specific, to the open box function. 
The id and specific box name is taken from the 'temparray' prop which is passsed down to the component from  the 'AllItemsViewer' component
and that is generated by mapping 'sectionItems' which is passed as a prop to the compenent from the main app, where it has been created using state. 

the above state is set via an object passed as parameter to the 'allsectionItems' function inside NewBoxForm, which was sent to it as a prop from the main app. 
This function is activated by the view all section items button; but before this happens, an variable is created for a filter of all items in allItemsArray whose section id property is the same as the section it prop sent to  newBoxForm - this array is ordered by 'BOX ID' and is then later sent on to create the temparrays (see above paragraph) ; so it's here where the section items get created. 


Here's the process: 
User views a section
Sees NewBoxForm and Boxes
NewBoxForm automatically creates an array of section items, called sortedSectionItems, out of all items array,  by using the sectionId prop passed to NewBoxForm,  to filter all items having that section ID. 
NewBoxForm also recieives 'allSectionItems' function as a prop, and that function is nested inside another 'viewAllItems', 
ViewAllItems is sent as a prop to the ViewAllItemsbutton component.
ViewAllItemsbutton's  sole purpose is to act as a button to execute ViewAllItems; 
ViewAllItems then executes the 'allSectionItems' function using the previously created sortedSectionItems as a parameter. 
Back in the main APP, the allSectionItems function executes setSectionItems(sortedSectionItems). 
This updates 'sectionItems' which is passed as a prop to the  AllItemsViewer component
allSectionItems also executes setView('all section items') which opens the 'AllItemsViewer' compenent. 
There, sectionItems is used to create the individual arrays from the box names, one at a time, naming them 'temparray'
Each 'temparry' is passed to the AllItemsObject component where the box name is extracted, and box items are displayed in a list
The 'openBox' function is also passed as a prop to AllItemsViewer, which is passed on to AllItemsObject 
The box elements created in AllItemsObject are made clickable
Using box id, boxName and general area('box), The onclick attached to each box can then execute the openBox function which was passed as prop. 
This opens the box as if the user was opening it from section view.  
Since ViewAllItems component was viewed from inside a section, parentId and sectionId refer back to that section. 
So when openBox is executed, it references the parent section id and location id and is able to open the box using its passed parameters. 

WHAT TO DO: 
Instead of using all items array, find a way to create sectionItems using parentId and sectionId to identify the section, and then, create a new array by spreading section_contents.  That way, the boxes are already separated, and it should just be a case of sending each box object, using a map function, to AllItemsObject  where it can extract box_name, to display its name in the JSX element, and box_id, so it can be used to open the box,  and map through box_contents to create the list of contents within the box. 

In fact; this object could be sent to the main app and used when executing setSectionItems() so that, effectively, sectionItems would be the section_contents array, which contains all the box objects. 

COMPLETE... 

























